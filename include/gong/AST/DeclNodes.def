//===-- DeclNodes.def - Metadata about Decl AST nodes -----------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
//  This file defines the declaration nodes within the AST. The
//  description of the declaration nodes uses six macros: 
//
//  DECL(Derived, Base) describes a normal declaration type Derived
//  and specifies its base class. Note that Derived should not have
//  the Decl suffix on it, while Base should.
//
//  LAST_DECL(Derived, Base) is like DECL, but is used for the last
//  declaration in the list.
//
//  ABSTRACT_DECL(Derived, Base) describes an abstract class that is
//  used to specify a classification of declarations. For example,
//  TagDecl is an abstract class used to describe the various kinds of
//  "tag" declarations (unions, structs, classes, enums).
//
//  DECL_CONTEXT(Decl) specifies that Decl is a kind of declaration
//  that is also a DeclContext.
//  
//  LAST_DECL_CONTEXT(Decl) is like DECL_CONTEXT, but is used for the
//  last declaration context.
//
//  DECL_RANGE(CommonBase, Start, End) specifies a range of
//  declaration values that have a common (potentially indirect) base
//  class.
//
//  LAST_DECL_RANGE(CommonBase, Start, End) is like DECL_RANGE, but is
//  used for the last declaration range.
//
//  Note that, due to the use of ranges, the order of the these
//  declarations is significant. A declaration should be listed under
//  its base class.
//  ===----------------------------------------------------------------------===//

#ifndef DECL
#  define DECL(Derived, Base)
#endif

#ifndef LAST_DECL
#  define LAST_DECL(Derived, Base) DECL(Derived, Base)
#endif

#ifndef ABSTRACT_DECL
#  define ABSTRACT_DECL(Derived, Base)
#endif

#ifndef DECL_CONTEXT
#  define DECL_CONTEXT(Decl)
#endif

#ifndef DECL_CONTEXT_BASE
#  define DECL_CONTEXT_BASE(Decl) DECL_CONTEXT(Decl)
#endif

#ifndef LAST_DECL_CONTEXT
#  define LAST_DECL_CONTEXT(Decl) DECL_CONTEXT(Decl)
#endif

#ifndef DECL_RANGE
#  define DECL_RANGE(CommonBase, Start, End)
#endif

#ifndef LAST_DECL_RANGE
#  define LAST_DECL_RANGE(CommonBase, Start, End) \
  DECL_RANGE(CommonBase, Start, End)
#endif

DECL(TranslationUnit, Decl)

ABSTRACT_DECL(Declaration, Decl)
  DECL(SingleDeclaration, DeclarationDecl)
  DECL(MultiDeclaration, DeclarationDecl)

DECL(TypedIdentList, Decl)
  DECL(ConstSpec, TypedIdentListDecl)
  DECL(VarSpec, TypedIdentListDecl)

ABSTRACT_DECL(Named,  Decl)
  //DECL(Namespace, NamedDecl)

  DECL(TypeSpec, NamedDecl)

  DECL(TypedIdentEntry, NamedDecl)
    DECL(Const, TypedIdentEntryDecl)
    DECL(Var, TypedIdentEntryDecl)

  DECL(Function, NamedDecl)

  ABSTRACT_DECL(Type, Decl)
    DECL(BuiltinType, TypeDecl)
    DECL(NameType, TypeDecl)
    DECL(PointerType, TypeDecl)
    LAST_DECL(Typedef, TypeDecl)
    //ABSTRACT_DECL(Tag, TypeDecl)
    //  DECL(Enum, TagDecl)
    //  DECL(Record, TagDecl)
    //    DECL(CXXRecord, RecordDecl)
  //ABSTRACT_DECL(Value, NamedDecl)
  //  DECL(EnumConstant, ValueDecl)
  //  ABSTRACT_DECL(Declarator, ValueDecl)
  //    DECL(CFunction, DeclaratorDecl)
  //      DECL(CXXMethod, FunctionDecl)
  //        DECL(CXXConstructor, CXXMethodDecl)
  //        DECL(CXXDestructor, CXXMethodDecl)
  //        DECL(CXXConversion, CXXMethodDecl)
  //    DECL(Field, DeclaratorDecl)
  //    DECL(Var, DeclaratorDecl)
  //      DECL(ImplicitParam, VarDecl)
  //      DECL(ParmVar, VarDecl)
  //DECL(Using, NamedDecl)
  //DECL(UsingShadow, NamedDecl)
//DECL(LinkageSpec, Decl)
//DECL(FileScopeAsm, Decl)
//DECL(Friend, Decl)
//DECL(StaticAssert, Decl)
//LAST_DECL(Block, Decl)

// Declaration contexts. DECL_CONTEXT_BASE indicates that it has subclasses.
DECL_CONTEXT(TranslationUnit)
DECL_CONTEXT_BASE(TypedIdentList)
DECL_CONTEXT_BASE(Declaration)
//DECL_CONTEXT(Namespace)
//DECL_CONTEXT(LinkageSpec)
//DECL_CONTEXT_BASE(Tag)
LAST_DECL_CONTEXT(Function)
//LAST_DECL_CONTEXT(Block)

// Declaration ranges
DECL_RANGE(TypedIdentList, ConstSpec, VarSpec)
DECL_RANGE(TypedIdentEntry, Const, Var)
DECL_RANGE(Named, TypeSpec, Typedef)
DECL_RANGE(Declaration, SingleDeclaration, MultiDeclaration)
DECL_RANGE(Type, Typedef, Typedef)
//DECL_RANGE(Tag, Enum, CXXRecord)
//DECL_RANGE(Record, Record, CXXRecord)
//DECL_RANGE(Value, EnumConstant, ParmVar)
//DECL_RANGE(Declarator, Function, ParmVar)
LAST_DECL_RANGE(Function, Function, Function)
//LAST_DECL_RANGE(Var, Var, ParmVar)

#undef LAST_DECL_RANGE
#undef DECL_RANGE
#undef LAST_DECL_CONTEXT
#undef DECL_CONTEXT_BASE
#undef DECL_CONTEXT
#undef ABSTRACT_DECL
#undef LAST_DECL
#undef DECL

