//===-- BuiltinTypeNodes.def - Metadata about BuiltinTypes ------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
//  This file defines the database about various builtin singleton types.
//
//  BuiltinType::Id is the enumerator defining the type.
//
//  Context.SingletonId is the global singleton of this type.  Some global
//  singletons are shared by multiple types.
//
//    BUILTIN_TYPE(Id, SingletonId) - A builtin type that has not been
//    covered by any other #define.  Defining this macro covers all
//    the builtins.
//
//    SIGNED_TYPE(Id, SingletonId) - A signed integral type.
//
//    UNSIGNED_TYPE(Id, SingletonId) - An unsigned integral type.
//
//    FLOATING_TYPE(Id, SingletonId) - A floating-point type.
//
//    PLACEHOLDER_TYPE(Id, SingletonId) - A placeholder type.  Placeholder
//    types are used to perform context-sensitive checking of specific
//    forms of expression.
//
//===----------------------------------------------------------------------===//

#ifndef SIGNED_TYPE
#define SIGNED_TYPE(Id, SingletonId) BUILTIN_TYPE(Id, SingletonId)
#endif

#ifndef UNSIGNED_TYPE
#define UNSIGNED_TYPE(Id, SingletonId) BUILTIN_TYPE(Id, SingletonId)
#endif

#ifndef FLOATING_TYPE
#define FLOATING_TYPE(Id, SingletonId) BUILTIN_TYPE(Id, SingletonId)
#endif

#ifndef PLACEHOLDER_TYPE
#define PLACEHOLDER_TYPE(Id, SingletonId) BUILTIN_TYPE(Id, SingletonId)
#endif

//===- Builtin Types ------------------------------------------------------===//

// 'bool'
UNSIGNED_TYPE(Bool, BoolTy)

//===- Unsigned Types -----------------------------------------------------===//

// 'uint8'
UNSIGNED_TYPE(UInt8, UInt8Ty)

// 'uint16'
UNSIGNED_TYPE(UInt16, UInt16Ty)

// 'uint32'
UNSIGNED_TYPE(UInt32, UInt32Ty)

// 'uint64'
UNSIGNED_TYPE(UInt64, UInt64Ty)

//===- Signed Types -------------------------------------------------------===//

// 'int8'
SIGNED_TYPE(Int8, Int8Ty)

// 'int16'
SIGNED_TYPE(Int16, Int16Ty)

// 'int32'
SIGNED_TYPE(Int32, Int32Ty)

// 'int64'
SIGNED_TYPE(Int64, Int64Ty)

// FIXME: should 'byte' and 'rune' be in this file?
//        what about 'uint', 'int' (likely yes) and 'uintptr' (likely no)?

//===- Floating point types -----------------------------------------------===//

// 'float32'
FLOATING_TYPE(Float32, Float32Ty)

// 'float64'
FLOATING_TYPE(Float64, Float64Ty)

// 'complex64'
FLOATING_TYPE(Complex64, Complex64Ty)

// 'complex128'
FLOATING_TYPE(Complex128, Complex128Ty)

//===- Language-specific types --------------------------------------------===//

// FIXME: needed for 'nil'?
// This is the type of C++0x 'nullptr'.
BUILTIN_TYPE(NullPtr, NullPtrTy)

// __builtin_any_type.  A placeholder type.  Useful for clients
// like debuggers that don't know what type to give something.
// Only a small number of operations are valid on expressions of
// unknown type, most notably explicit casts.
PLACEHOLDER_TYPE(UnknownAny, UnknownAnyTy)

PLACEHOLDER_TYPE(BuiltinFn, BuiltinFnTy)

#ifdef LAST_BUILTIN_TYPE
LAST_BUILTIN_TYPE(BuiltinFn)
#undef LAST_BUILTIN_TYPE
#endif

#undef PLACEHOLDER_TYPE
#undef FLOATING_TYPE
#undef SIGNED_TYPE
#undef UNSIGNED_TYPE
#undef BUILTIN_TYPE
