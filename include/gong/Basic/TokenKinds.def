//===--- TokenKinds.def - Go Token Kind Database ----------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines the TokenKind database.  This includes normal tokens like
// tok::ampamp (corresponding to the && token) as well as keywords for various
// languages.  Users of this file must optionally #define the TOK, or KEYWORD
// macros to make use of this file.
//
//===----------------------------------------------------------------------===//

#ifndef TOK
#define TOK(X)
#endif
#ifndef PUNCTUATOR
#define PUNCTUATOR(X,Y) TOK(X)
#endif
#ifndef KEYWORD
#define KEYWORD(X) TOK(kw_ ## X)
#endif

// These define members of the tok::* namespace.
TOK(unknown)             // Not a token.
TOK(eof)                 // End of file.
TOK(eod)                 // End of preprocessing directive (end of line inside a
                         // directive).
TOK(code_completion)     // Code completion marker
TOK(defaultarg_end)      // C++ default argument end marker
TOK(comment)             // Comment
TOK(identifier)          // abcde123
TOK(numeric_literal)     // 0x123
TOK(rune_literal)        // 'a', '\u0027', etc
TOK(string_literal)      // "foo"
TOK(raw_string_literal)  // `foo`

PUNCTUATOR(plus,                "+")
PUNCTUATOR(minus,               "-")
PUNCTUATOR(star,                "*")
PUNCTUATOR(slash,               "/")
PUNCTUATOR(percent,             "%")
PUNCTUATOR(amp,                 "&")
PUNCTUATOR(pipe,                "|")
PUNCTUATOR(caret,               "^")
PUNCTUATOR(lessless,            "<<")
PUNCTUATOR(greatergreater,      ">>")
PUNCTUATOR(ampcaret,            "&^")
PUNCTUATOR(plusequal,           "+=")
PUNCTUATOR(minusequal,          "-=")
PUNCTUATOR(starequal,           "*=")
PUNCTUATOR(slashequal,          "/=")
PUNCTUATOR(percentequal,        "%=")
PUNCTUATOR(ampequal,            "&=")
PUNCTUATOR(pipeequal,           "|=")
PUNCTUATOR(caretequal,          "^=")
PUNCTUATOR(lesslessequal,       "<<=")
PUNCTUATOR(greatergreaterequal, ">>=")
PUNCTUATOR(ampcaretequal,       "&^=")
PUNCTUATOR(ampamp,              "&&")
PUNCTUATOR(pipepipe,            "||")
PUNCTUATOR(lessminus,           "<-")
PUNCTUATOR(plusplus,            "++")
PUNCTUATOR(minusminus,          "--")
PUNCTUATOR(equalequal,          "==")
PUNCTUATOR(less,                "<")
PUNCTUATOR(greater,             ">")
PUNCTUATOR(equal,               "=")
PUNCTUATOR(exclaim,             "!")
PUNCTUATOR(exclaimequal,        "!=")
PUNCTUATOR(lessequal,           "<=")
PUNCTUATOR(greaterequal,        ">=")
PUNCTUATOR(colonequal,          ":=")
PUNCTUATOR(ellipsis,            "...")
PUNCTUATOR(l_paren,             "(")
PUNCTUATOR(l_square,            "[")
PUNCTUATOR(l_brace,             "{")
PUNCTUATOR(comma,               ",")
PUNCTUATOR(period,              ".")
PUNCTUATOR(r_paren,             ")")
PUNCTUATOR(r_square,            "]")
PUNCTUATOR(r_brace,             "}")
PUNCTUATOR(semi,                ";")
PUNCTUATOR(colon,               ":")

// Keywords.  These turn into kw_* tokens.
KEYWORD(break)
KEYWORD(case)
KEYWORD(chan)
KEYWORD(const)
KEYWORD(continue)
KEYWORD(default)
KEYWORD(defer)
KEYWORD(else)
KEYWORD(fallthrough)
KEYWORD(for)
KEYWORD(func)
KEYWORD(go)
KEYWORD(goto)
KEYWORD(if)
KEYWORD(import)
KEYWORD(interface)
KEYWORD(map)
KEYWORD(package)
KEYWORD(range)
KEYWORD(return)
KEYWORD(select)
KEYWORD(struct)
KEYWORD(switch)
KEYWORD(type)
KEYWORD(var)

#undef KEYWORD
#undef PUNCTUATOR
#undef TOK
