//==--- DiagnosticLexKinds.td - liblex diagnostics ------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// Lexer Diagnostics
//===----------------------------------------------------------------------===//

#ifndef DIAG
#define DIAG(X,Y)
#endif

DIAG(null_in_string,       "null character(s) in string literal")
DIAG(null_in_rune,         "null character(s) in rune literal")
DIAG(null_in_file,         "null character(s) in file")
DIAG(nested_block_comment, "'/*' within block comment")

DIAG(unterminated_raw_string, "missing terminating '`' character")
DIAG(unterminated_string,  "missing terminating '\"' character")
DIAG(unterminated_rune,    "missing terminating ' character")
DIAG(unterminated_block_comment, "unterminated /* comment")

DIAG(conflict_marker,      "version control conflict marker in file")

DIAG(invalid_utf_sequence, "invalid utf8 sequence")

// Literal
DIAG(empty_rune,           "empty rune literal")
//def ext_unknown_escape : ExtWarn<"unknown escape sequence '\\%0'">;
//def err_hex_escape_no_digits : Error<"\\x used with no following hex digits">;
//def err_ucn_escape_no_digits : Error<"\\u used with no following hex digits">;
//def err_ucn_escape_invalid : Error<"invalid universal character">;
//def err_ucn_escape_incomplete : Error<"incomplete universal character name">;
//def err_ucn_escape_basic_scs : Error<
//  "character '%0' cannot be specified by a universal character name">;
//def err_ucn_control_character : Error<
//  "universal character name refers to a control character">;
//def err_invalid_decimal_digit : Error<"invalid digit '%0' in decimal constant">;
//def err_invalid_binary_digit : Error<"invalid digit '%0' in binary constant">;
//def err_invalid_octal_digit : Error<"invalid digit '%0' in octal constant">;
//def err_exponent_has_no_digits : Error<"exponent has no digits">;
//
//def warn_octal_escape_too_large : ExtWarn<"octal escape sequence out of range">;
//def warn_hex_escape_too_large : ExtWarn<"hex escape sequence out of range">;
//def ext_string_too_long : Extension<"string literal of length %0 exceeds "
//  "maximum length %1 that %select{C90|ISO C99|C++}2 compilers are required to "
//  "support">, InGroup<OverlengthStrings>;
//
//}
//


// FIXME: move to DiagnosticFrontendKinds
DIAG(verify_inconsistent_diags,
    "diagnostic %select{expected|seen}0 but not %select{seen|expected}0: %1")
DIAG(verify_invalid_content, "invalid expected diag: %0")
DIAG(verify_invalid_no_diags,
    "%select{expected|'expected-no-diagnostics'}0 directive cannot follow "
    "%select{'expected-no-diagnostics' directive|other expected directives}0")
DIAG(verify_invalid_range, "invalid range following '-' in expected diag")
DIAG(verify_missing_line,
    "missing or invalid line number following '@' in expected diag")
DIAG(verify_missing_start, "cannot find start ('{{') of expected diag")
DIAG(verify_missing_end, "cannot find end ('}}') of expected diag")
DIAG(verify_no_directives,
    "no expected directives found: consider use of 'expected-no-diagnostics'")

// FIXME: move to DiagnosticParseKinds
DIAG(expected_package,             "expected 'package'")
DIAG(expected_ident,               "expected identifier")
DIAG(invalid_package_name,         "invalid package name %0")
DIAG(expected_semi_package,        "expected ';' after package name")
DIAG(expected_semi_import,         "expected ';' after import line")
DIAG(expected_semi,                "expected ';'")
DIAG(expected_string_literal,      "expected string literal")
DIAG(expected_ident_or_l_paren,    "expected identifier or '('")
DIAG(expected_ident_or_star,       "expected identifier or '*' in 'struct'")
DIAG(expected_l_paren,             "expected '('")
DIAG(expected_r_paren,             "expected ')'")
DIAG(expected_l_square,            "expected '['")
DIAG(expected_r_square,            "expected ']'")
DIAG(expected_l_brace,             "expected '{'")
DIAG(expected_r_brace,             "expected '}'")
DIAG(expected_equal,               "expected '='")
DIAG(expected_l_brace_or_l_paren,  "expected '{' or '('")
DIAG(expected_type,                "expected type")
DIAG(expected_element_type,        "expected element type")
DIAG(expected_chan,                "expected 'chan'")
DIAG(expected_period_or_ident_or_string,
    "expected '.' or identifier or string literal")
DIAG(expected_expr,                "expected expression")
DIAG(expected_expr_or_typeswitchguard,
    "expected expression or type switch guard")
DIAG(expected_colonequal_or_equal, "expected ':=' or '='")
DIAG(expected_if_or_l_brace,       "expected 'if' or '{'")
DIAG(expected_case_or_default,     "expected 'case' or 'default'")
DIAG(expected_colon,               "expected ':'")
DIAG(expected_period,              "expected '.'")
DIAG(unimplemented_package_name,   "sorry, package-qualifiers don't work yet")
DIAG(range_only_valid_in_for,      "'range' is only valid in for statements")
DIAG(type_only_valid_in_switch,    "unexpected '.(type)'")
DIAG(invalid_expr_left_of_colonequal, "unexpected expression before ':='")
