//==--- DiagnosticLexKinds.td - liblex diagnostics ------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// Lexer Diagnostics
//===----------------------------------------------------------------------===//

#ifndef DIAG
#define DIAG(X,Y,Z)
#endif

DIAG(null_in_string,       CLASS_ERROR, "null character(s) in string literal")
DIAG(null_in_rune,         CLASS_ERROR, "null character(s) in rune literal")
DIAG(null_in_file,         CLASS_ERROR, "null character(s) in file")
DIAG(nested_block_comment, CLASS_ERROR, "'/*' within block comment")

DIAG(unterminated_raw_string, CLASS_ERROR, "missing terminating '`' character")
DIAG(unterminated_string,  CLASS_ERROR, "missing terminating '\"' character")
DIAG(unterminated_rune,    CLASS_ERROR, "missing terminating ' character")
DIAG(unterminated_block_comment, CLASS_ERROR, "unterminated /* comment")

DIAG(conflict_marker,      CLASS_ERROR,
    "version control conflict marker in file")

DIAG(invalid_utf_sequence, CLASS_ERROR, "invalid utf8 sequence")

// Literal
DIAG(empty_rune,           CLASS_ERROR, "empty rune literal")
//def ext_unknown_escape : ExtWarn<"unknown escape sequence '\\%0'">;
//def err_hex_escape_no_digits : Error<"\\x used with no following hex digits">;
//def err_ucn_escape_no_digits : Error<"\\u used with no following hex digits">;
//def err_ucn_escape_invalid : Error<"invalid universal character">;
//def err_ucn_escape_incomplete : Error<"incomplete universal character name">;
//def err_ucn_escape_basic_scs : Error<
//  "character '%0' cannot be specified by a universal character name">;
//def err_ucn_control_character : Error<
//  "universal character name refers to a control character">;
//def err_invalid_decimal_digit : Error<"invalid digit '%0' in decimal constant">;
//def err_invalid_binary_digit : Error<"invalid digit '%0' in binary constant">;
//def err_invalid_octal_digit : Error<"invalid digit '%0' in octal constant">;
//def err_exponent_has_no_digits : Error<"exponent has no digits">;
//
//def warn_octal_escape_too_large : ExtWarn<"octal escape sequence out of range">;
//def warn_hex_escape_too_large : ExtWarn<"hex escape sequence out of range">;
//def ext_string_too_long : Extension<"string literal of length %0 exceeds "
//  "maximum length %1 that %select{C90|ISO C99|C++}2 compilers are required to "
//  "support">, InGroup<OverlengthStrings>;
//
//}
//

// FIXME: move to DiagnosticCommonKinds
DIAG(note_matching,                CLASS_NOTE, "to match this '%0'")

// FIXME: move to DiagnosticFrontendKinds
DIAG(verify_inconsistent_diags, CLASS_ERROR,
  "'%0' diagnostic %select{expected|seen}1 but not %select{seen|expected}1: %2")
DIAG(verify_invalid_content, CLASS_ERROR, "invalid expected %0: %1")
DIAG(verify_invalid_no_diags, CLASS_ERROR,
    "%select{expected|'expected-no-diagnostics'}0 directive cannot follow "
    "%select{'expected-no-diagnostics' directive|other expected directives}0")
DIAG(verify_invalid_range, CLASS_ERROR,
    "invalid range following '-' in expected %0")
DIAG(verify_missing_line, CLASS_ERROR,
    "missing or invalid line number following '@' in expected %0")
DIAG(verify_missing_start, CLASS_ERROR,
    "cannot find start ('{{') of expected %0")
DIAG(verify_missing_end, CLASS_ERROR,
    "cannot find end ('}}') of expected %0")
DIAG(verify_no_directives, CLASS_ERROR,
    "no expected directives found: consider use of 'expected-no-diagnostics'")


// FIXME: move to DiagnosticParseKinds
DIAG(expected_package,             CLASS_ERROR, "expected 'package'")
DIAG(expected_ident,               CLASS_ERROR, "expected identifier")
DIAG(import_path_literal,          CLASS_ERROR,
    "import path must be string literal")
DIAG(invalid_package_name,         CLASS_ERROR, "invalid package name %0")
DIAG(expected_semi_package, CLASS_ERROR, "expected ';' after package name")
DIAG(expected_semi_import,  CLASS_ERROR, "expected ';' after import line")
DIAG(expected_semi,                CLASS_ERROR, "expected ';'")
DIAG(expected_semi_or_r_brace,     CLASS_ERROR, "expected ';' or '}'")
DIAG(expected_semi_or_r_paren,     CLASS_ERROR, "expected ';' or ')'")
DIAG(expected_string_literal,      CLASS_ERROR, "expected string literal")
DIAG(expected_ident_or_l_paren,    CLASS_ERROR, "expected identifier or '('")
DIAG(expected_ident_star_or_r_brace,CLASS_ERROR,
    "expected identifier, '*', or '}' in 'struct'")
DIAG(expected_ident_or_r_brace,    CLASS_ERROR, "expected identifier or '}'")
DIAG(expected_l_paren,             CLASS_ERROR, "expected '('")
DIAG(expected_r_paren,             CLASS_ERROR, "expected ')'")
DIAG(expected_l_square,            CLASS_ERROR, "expected '['")
DIAG(expected_r_square,            CLASS_ERROR, "expected ']'")
DIAG(expected_r_square_or_colon,   CLASS_ERROR, "expected ']' or ':'")
DIAG(expected_l_brace,             CLASS_ERROR, "expected '{'")
DIAG(expected_r_brace,             CLASS_ERROR, "expected '}'")
DIAG(expected_equal,               CLASS_ERROR, "expected '='")
DIAG(expected_equal_or_type,       CLASS_ERROR, "expected '=' or type")
DIAG(expected_l_brace_or_l_paren,  CLASS_ERROR, "expected '{' or '('")
DIAG(expected_topleveldecl,        CLASS_ERROR,
    "expected 'func', 'var', 'type', or 'const'")
DIAG(expected_type,                CLASS_ERROR, "expected type")
DIAG(expected_element_type,        CLASS_ERROR, "expected element type")
DIAG(expected_chan,                CLASS_ERROR, "expected 'chan'")
DIAG(expected_period_or_ident_or_string, CLASS_ERROR,
    "expected '.' or identifier or string literal")
DIAG(expected_l_paren_after_builtin, CLASS_ERROR,
    "expected '(', builtins can only be used in calls")
DIAG(expected_expr,                CLASS_ERROR, "expected expression")
DIAG(expected_expr_or_colon,       CLASS_ERROR, "expected expression or ':'")
DIAG(expected_expr_or_typeswitchguard, CLASS_ERROR,
    "expected expression or type switch guard")
DIAG(expected_colonequal_or_equal, CLASS_ERROR, "expected ':=' or '='")
DIAG(expected_assign_op,           CLASS_ERROR, "expected assignment operator")
DIAG(expected_if_or_l_brace,       CLASS_ERROR, "expected 'if' or '{'")
DIAG(expected_case_or_default,     CLASS_ERROR, "expected 'case' or 'default'")
DIAG(expected_colon,               CLASS_ERROR, "expected ':'")
DIAG(expected_period,              CLASS_ERROR, "expected '.'")
DIAG(range_only_valid_in_for,      CLASS_ERROR,
    "'range' is only valid in for statements")
DIAG(unexpected_kw_type,           CLASS_ERROR, "unexpected '.(type)'")
DIAG(invalid_expr_left_of_colonequal, CLASS_ERROR,
    "unexpected expression before ':='")
DIAG(parser_impl_limit_overflow,   CLASS_ERROR,
    "parser recursion limit reached, program too complex")
DIAG(expected_stmt,                CLASS_ERROR, "expected statement")
DIAG(unexpected_ellipsis,          CLASS_ERROR, "unexpected '...'")
DIAG(unexpected_type,              CLASS_ERROR, "unexpected type")
DIAG(expected_idents_only_before_ellipsis, CLASS_ERROR,
    "expected only identifiers before '...'")
DIAG(there_is_no_while,            CLASS_ERROR,
    "'while' is spelled 'for' in Go")
DIAG(missing_parameter_list,       CLASS_ERROR, "missing parameter list")

// FIXME: move to DiagnosticSemaKinds
DIAG(unimplemented_package_import, CLASS_ERROR, "sema cannot handle import yet")
DIAG(redefinition,                 CLASS_ERROR, "redefinition of %0")
DIAG(note_previous_definition,     CLASS_NOTE, "previous definition is here")
DIAG(too_few_initializers,         CLASS_ERROR,
    "too few initializers, expected %0, have %1")
DIAG(too_many_initializers,        CLASS_ERROR,
    "too many initializers, expected %0, have %1")
DIAG(no_new_vars_in_shortvardecl,  CLASS_ERROR,
    "no new variables declared, use '=' instead of ':='")
DIAG(note_var_declared,            CLASS_NOTE, "var %0 declared here")
DIAG(note_const_declared,          CLASS_NOTE, "const %0 declared here")
DIAG(note_func_declared,           CLASS_NOTE, "func %0 declared here")
DIAG(note_field_declared,          CLASS_NOTE, "field %0 declared here")
DIAG(undeclared_var_use,           CLASS_ERROR,
    "use of undeclared identifier %0")
//DIAG(undeclared_var_use_suggest, CLASS_ERROR,
    //"use of undeclared identifier %0; did you mean $1?")
DIAG(does_not_refer_to_type,       CLASS_ERROR, "%0 does not name a type")
DIAG(no_field,                     CLASS_ERROR, "no field %0 in %1")
DIAG(typecheck_field_reference_struct,
                                   CLASS_ERROR,
    "selector base type %0 is not a struct")
DIAG(ambiguous_name,               CLASS_ERROR, "name %0 is ambiguous")
