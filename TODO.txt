Lexer
=====

Eventually: code completion markers
fixits, ranges
flag to dump stats


mark unknown tokens in the rune / string error cases as literals, so that semi
insertion is done. Makes error recovery nicer. (`var a = ''\nvar b` doesn't
recover well atm)

lookahead

literal lexing and diags (078 vs 078.0, 'aa', etc. `ack FIXME test/Lex`)

use lexer to train a n-gram token model, write a markov go generator using that
data


Parser
=====

type / identifier mismatch in function results / parameters

ExprResult/StmtResult for result passing

Actions interface

measureTokenLength

go doesn't need predeclarations for methods, figure out how to do that
=> similar to objc, check what clang does.

Have nice fixit for toplevel `a := b`

Handle https://groups.google.com/forum/#!topic/golang-nuts/Bv4GDkPRMxA well

missing closing braces after interface, struct, blocks, selects, switchs
missing closing parens after impor/var/const/type spec


introduce a consistent naming scheme for functions that assert the current
token type vs those that don't
    handle tok::unknown

share {} parsing code for interface{}, struct{}, and possibly blocks,
selectstmts, and switchstmts

maybe share the optional SimpleStmt parsing code in ifstmt, forstmt, switchstmt

look at BalancedDelimTracker and friends, so that eg |type t ['4'.(int]int|
gets only one diag

"""if x == (T{a,b,c}[i]) { … }
if (x == T{a,b,c}[i]) { … }"""  <- xxx ambiguity?


nice diag with fixit (insert '()') for `func main {}`

nice diag with fixit (insert ',') for
  myfunc(
    4
  )


ParseStatement() just crashes on unexpected tokens (eg ')' or 'package')

Add scopes:
function parameters
each if, for, and switch is in its own implicit block
each clause of a switch or select acts as an implicit block


# expressions:

Builtins:

close(chan expr)
len(s), cap(s), s an expr
new(T), T a type
make(T), make(T, n), make(T, m, n), T a type, m, n exprs
append(s, x...)
copy(dst [], src[])
delete(m, k)
complex(r, i), real(c), imag(c)
panic(interface{}), recover() interface{}

print(), println(): implementation-specific; might not exist


Actions
=======

types/exprs in ()
(*TypeName) in MethodExprs
*foo() vs (*foo)()
<-foo() vs (<-foo)()
func()(foo) vs (func())(foo)


Frontend
========

-parse-noop and -parse-print-callbacks: (r109392)
lib/Frontend/FrontendActions.cpp
ParseOnlyAction
PrintParseAction
tools/driver/cc1_main.cpp
clang/Frontend/FrontendActions.h



Long term
=========

http://llvm.org/docs/GarbageCollection.html
-> Can this work with the regular go collector?

libclang-style c api
python bindings for that c api
clang-complete clone on top of the python bindings


Notes
=====

go is easier to lex:
- no escaped newlines
- no trigraphs
- no preprocessor
- way fewer string literal types

parse:
- no templates
- no vexing parse
- fewer precedence levels

+ annoying: parameterdecl. if identifier, need to look at next token.
                           if next is ',', identifier is part of IdentifierList
                           elif next is '...', identifier is IdentifierList
                           elif next is type, identifier is IdentifierList
                           else identifier is type
+ annoying: simplestmt vs expr in if. always need to parse simplestmt, and then
            potentially convert to expr. "for" is worse cause the simplestmt
            parsing needs to allow a rangeexpr in that case too.
+ annoying: switchstms. Have to parse a simplestmt first, but if that's not
            followed by a ';', the simplestmt was actually a TypeSwitchGuard,
            so parsesimplestmt needs to allow that too :-/


spec groups:
import, var, const, type


range expressions are weird. They're the only place where full expressions are
allowed at the lhs (actually, RecvStms are like this too). This is valid:

package main
func main() {
  arr := [...]int {1, 2, 3 }
  for arr[0] := range arr {
    println(arr[0])
  }
}

But this is not:

package main
func main() {
  arr := [...]int {1, 2, 3 }
  for arr[0] := 0; arr[0] < 2; arr[0]++ {
    println(arr[0])
  }
}

(Both programs are valid if you use '=' instead of ':=')

minimalaction deletion:
http://lists.cs.uiuc.edu/pipermail/cfe-commits/Week-of-Mon-20100719/032534.html


clang diags:
DiagnosticsEngine::Diag() central function
ArgumentKind has std_string, declcontext, etc
has a SourceManager
error limits, ignores warnings, fatal errors, include stacks, macro stacks,
template stacks, some argumentkinds (identifierinfo and later) and corresponding
DiagBuilder operator<< overloads

DiagnosticBuilder adds stuff (arguments, source ranges) stuff to diags before
they're printed

Delegates to DiagnosticConsumer

DiagnosticsEngine uses DiagnosticIDs as id database, which in turn depends on
all the hardcoded .td files for clang stuff. (DiagnosticIDs::EmitDiag() gets a
DiagnosticEngine object.)

DiagnosticConsumers:
TextDiagnosticBuffer: Stores messages
TextDiagnosticPrinter: Prints messages

DiagnosticEngine dep on DiagnosticIDs might be movable behind an interface.
