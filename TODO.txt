Lexer
=====

Eventually: code completion markers
fixits, ranges
flag to dump stats

mark unknown tokens in the rune / string error cases as literals, so that semi
insertion is done. Makes error recovery nicer. (`var a = ''\nvar b` doesn't
recover well atm)

lookahead

literal lexing and diags (078 vs 078.0, 'aa', etc. `ack FIXME test/Lex`)

use lexer to train a n-gram token model, write a markov go generator using that
data


Parser
=====

Multi-file modules

Allow parens around receiver types,
https://code.google.com/p/go/source/detail?r=c7fe6d0e90eb

for f in $(find ~/src/go/src/pkg/ -name '*.go'); do echo $f; if ! ../../Release+Asserts/bin/gong $f; then break; fi; done

check IsExpression() everywhere ParseExpression() is called

ExprResult/StmtResult for result passing

diag only once on 
  a := (a[1)

Only one diag when ending a file without a closing ) (imports) / } (blocks)

Actions interface

measureTokenLength

Have nice fixit for toplevel `a := b`

Nice fixit to replace "while" with "for" (if no identifier with same name found)

Have nice fixit for "func a(){}" at function scope (just remove name?)

Handle https://groups.google.com/forum/#!topic/golang-nuts/Bv4GDkPRMxA well

missing closing braces after interface, struct, blocks, selects, switchs
missing closing parens after impor/var/const/type spec


introduce a consistent naming scheme for functions that assert the current
token type vs those that don't
    handle tok::unknown
  MaybeParse...() in clang is for stuff based on langopts
  TryParseFoo / TryFoo
  ExpectFoo
  MustParseFoo
  DoParseFoo
  DiagParseFoo
  ErrParseFoo
  SoftParseFoo
  CanParseFoo
  CouldParseFoo
  ConsumeFoo
  EatFoo
  CheckParseFoo
    ...but in all cases, only the head is asserted

  parser.go does tryFoo / parseFoo. acorn.js mostly does parseFoo.

share {} parsing code for interface{}, struct{}, and possibly blocks,
selectstmts, and switchstmts

maybe share the optional SimpleStmt parsing code in ifstmt, forstmt, switchstmt

make it so that eg |type t ['4'.(int]int| gets only one diag. clang does this
with this code in ParseParenExpr() (at the very end):

  if (Result.isInvalid()) {
    SkipUntil(tok::r_paren);
    return ExprError();
  }

  T.consumeClose();



nice diag with fixit (insert '()') for `func main {}`

nice diag with fixit (insert ',') for
  myfunc(
    4
  )

nice diag with fixit (insert "()") for |if a == type{} { ... }|

Add scopes:
function parameters
each if, for, and switch is in its own implicit block
each clause of a switch or select acts as an implicit block


Sema / AST
==========

Inject into scopes:
* function parameters
* simplevardecls
* decls in ifs, fors, switchs, selects
* decls in case clauses
* handle methoddecls


- Name lookup, redecl errors, scope, decl ast
  In clang: SemaDecl.cpp, ActOnDeclarator(), PushOnScopeChains()
  ActOnFunctionDeclarator, ActOnTypedefDeclarator, ActOnVariableDeclarator,
  ActOnParamDeclarator, ActOnCXXMemberDeclarator are all called by
  ActOnDeclarator depending on the type of the declspec.

  For structs: ActOnTag -> DeclPtr, ActOnTagStartDefinition(DeclPtr),
    FinishDefinition(DeclPtr), DefinitionError(DeclPtr)

  Functions: ActOnStartOfFunctionDef, ActOnFinishFunctionBody

  - Scopes, in clang

    TopFunctionScope, FunctionScopes, TUScope, PopFunctionOrBlockScope()

  In go, file scope is only used for imports. package-scoped stuff can't have
  the same names as file-scoped stuff.

  - Identifier resolving: IdentifierResolver.cpp

  Plan:
    ActOnDeclGroupStart/End() for () decls? With type, for iota
        Sema needs a stack of groups
        Where is the SourceLoc for the 'var'/'const'/'type' keywords stored?
        Groups need paren locs too

      ActOnTypeSpec(identifier, type)

      // type* and exprlist* can both be NULL (for implicit iota and so on)
      // if type* is not NULL, exprlist* is always non-NULL too.
      ActOnConstSpec(identlist, type*, sourceloc equalloc, exprlist*)

      // type is mandatory, exprlist is optional.
      ActOnVarSpec(identlist, type, sourceloc equalloc, exprlist*)

      // exprlist is mandatory
      ActOnVarSpec(identlist, equalloc, exprlist)

    ActOnFunctionDecl(sourceloc funcloc, ident name, signature)
    ActOnMethodDecl(ident, star, ident, funcloc, name, signature)

    ActOnShortVarDecl(identlist, equalloc, exprlist)

    Hm, these need Type and Expr already. Punt that part for now.

  This is valid and has nested decl groups:
  var (
    A = func()int {const (C = iota); return C}()
  )

  identlists in gong vs declarators in clang: ActOnDeclarator called for every
  single declarator

  declspec: unsigned, inline, virtual, explicit, auto, signed, typeof,
            TST_typename (for structs), struct
  declaratorchunk: pointer, ref, arr, fun, memberpointer, paren
  declarator: declspec, list of declaratorchunks,
              single identifier (unqualifiedid), context
              parameter info

  Parser:
    Scope
      Scope::getEntity() is a DeclContext in Sema
        via Sema::PushDeclContext() / PopDeclContext()
      scope flags: 
        Scope::DeclScope
  AST:
    DeclContext
      decl_iterator of decls; specific_decl_iterator to limit
    Decl
      has source loc, attrs, used, invalid etc bits
      NextInContext list
    Redeclarable<>
      linked list of decls (with cycle and some bool)
  Sema:
    IdentifierResolver
    LookupResult
    LookupName()
    PushOnScopeChains()

  concepts:
    lexical decl context and semantic decl context
    scope chains
    decl chains, canonical decls
    decl merging

  substeps
  - ast nodes for specs, spec groups
    - for all types too eventually
  - actions interface for specs, scopes
  - get scoping right
  - special rules: don't bind to '_', allow redefinitions of global 'init()'
  - later: structs, methoddecls, type correction for structs, modules
  - DeclTy ownership

- Expression Sema & AST, Exprs vs Types
  - Exprs vs Types: DeclRefExpr pointing to TypeDecl (pointing to Type) or
    VarDecl (pointing to ident, type)
  - typo correction!
- Constant expressions
- Statement Sema & AST
- Out-of-order parsing for toplevel
- Multi-file packages



Find out:
* DeclTy casting system
  Sema::ActOnAlignOfExpr() for example just takes a void* and casts.
  There's also ExprArg with a takeAs<Expr>() method
  Calls have MultiExprArg (ActOnCallExpr)
* go doesn't need predeclarations for methods, figure out how to do that
  => similar to objc, check what clang does.
  Parser.h:
    ObjCImplParsingDataRAII
      typedef SmallVector<LexedMethod*, 8> LateParsedObjCMethodContainer;
      LateParsedObjCMethodContainer LateParsedObjCMethods;
  ParseObjc.cpp
    Parser::parseLexedObjcMethodDefs() -> calls PP.EnterTokenStream()


  (Also inline methods:
  DeclSpec.h:992:
    typedef SmallVector<Token, 4> clang::CachedTokens
  Parser.h:
    struct LateParsedDeclaration
    struct LexedMethod : public LateParsedDeclaration
      CachedTokens Toks;

  ParseCXXInlineMethods.cpp:378
    Parser::ParseLexedMethodDef() -> calls PP.EnterTokenStream())

  => clang's design is to stash a way a vector with all Tokens and parse those.
  => An alternative design would be to do two lex passes, with the first just
     matching decls ("func foo", "var foo", "const foo", "type foo") quickly.
  Implement both and measure, I guess :-/


 http://lists.cs.uiuc.edu/pipermail/cfe-commits/Week-of-Mon-20120206/052791.html
* DeclTY etc allocation: new (Context) Whatevs(...)
* Find out why Sema.h moved from lib/ to include/
* QualType and Type
* ASTContext turns Decls into QualTypes
* QualType vs CanQualType
* redeclarations in go -> not allowed at all!
  ...except for init() 9_9
* i-c-e handling
  -> http://clang.llvm.org/docs/InternalsManual.html#Constants
* Basic idea of package handling
  Looks like all source files in the same package need to be compiled in one
  compiler invocation. They're probably all parsed, then merged, then Sema'd
  and codegenned as one?
  _test.go files are magic somehow (sounds like everything is rebuilt?)


constants / constant expressions:
  http://tip.golang.org/ref/spec#Constant_expressions
  http://tip.golang.org/ref/spec#Constants
 integer, rune, float complex, string
 operators
 conversions()
 identifiers referring to constants
 typed and untyped constants
 unsafe.Sizeof, cap() and len() sometimes (len of constant str, cap and len
   of constant array with no func calls or channel recvs)
 true false iota


AST

  Module
    File  <- for "package foo"

  ImportSpec  <- Decl?
    SingleImportSpec
    MultiImportSpec

  Stmt
    NullStmt
    BlockStmt
    CaseStmt?
    IfStmt
    ExprSwitchStmt
    TypeSwitchStmt
    ForStmt
    RangeForStmt?
    ExprStmt?
    GotoStmt
    ReturnStmt
    BreakStmt
    ContinueStmt
    FallthroughStmt?
    AsmStmt? :-D
    DeclStmt
    LabeledStmt
    GoStmt
    DeferStmt
    SelectStmt
    SendStmt
    IncDecStmt
    Assignment
    ShortVarDecl

   Expression
    Literal
     BasicLit
       IntLit
       FloatLit
       ImaginaryLit
       CharLit
       StringLit
     CompositeLit
       ...
     FunctionLit
    OperandName (?) / DeclRefExpr
    BinaryExpr
    UnaryExpr
    Conversion
    BuiltinCall
    SelectorExpr
    IndexExpr
    SliceExpr
    TypeAssertionExpr
    CallExpr
    TypeClauseExpr?
    RangeExpr?

   Module
    File
     TopLevelDecl
   Declaration
    SingleDeclaration
    MultiDeclaration

  TypeSpecDecl
  VarSpecDecl  : identlist, exprlist, equalloc
    VarDecl: VarSpecDecl ptr, index

  FIXME: look at clang's DeclGroupRef again

    ConstDecl
      SingleConstSpec
      MultiConstSpec

    blah, ConstSpec has to be a child of NamedDecl
    => This is similar to LinkageSpecDecl in clang. Make all the Decls be
    transparent DeclContexts, and have FooSpec be a child class of NamedDecl

    enums:
      ActOnTag
      ActOnTagStartDefinition()
      for
        ActOnEnumConstant
      ActOnEnumBody(all enums)
      ActOnTagFinishDefinition()

    TypeDecl  ('type' is in 'loc' of decl superclass)
      SingleTypeDecl
      MultiTypeDecl

      void ActOnSingleTypeDecl(typeloc, ii, iiloc, type*)
      DeclTy ActOnStartMultiTypeDecl(typeloc, lparenloc)
      void ActOnMultiTypeDeclSpec(DeclTy, ii, iiloc, type*)
      void ActOnEndMultiTypeDecl(DeclTy, rparenloc)

    VarDecl
      SingleVarDecl
      MultiVarDecl
   FunctionDecl
   MethodDecl

  Type
    BooleanType
    NumericType
    ArrayType
    SliceType
    StructType
    PointerType
    FunctionType
    InterfaceType
    MapType
    ChannelType
 Strong typedefs => all types are canonical

Type identity:
  http://tip.golang.org/ref/spec#Properties_of_types_and_values

  named types identical if from same typespec (ie `type foo int` and int are
  different)
  arrays are identical if same type and len
  slices are identical if same type



Actions
=======

Document ownership model.
  OwningExpr/StmtResult: Will be deleted by parser by calling
      Action::DeleteExpr/Stmt() (FIXME: Why no OwningDeclResult?)
  Expr/StmtResult: weak form thereof

  Expr/StmtArg: "as arguments" (FIXME: huh?)

  MultiExpr/StmtArg: Collection of Expr/StmtArgs

  move()
  move_arg()
  release()

types/exprs in ()
(*TypeName) in MethodExprs
*foo() vs (*foo)()
<-foo() vs (<-foo)()
func()(foo) vs (func())(foo)


Frontend
========

-parse-noop and -parse-print-callbacks: (r109392)
lib/Frontend/FrontendActions.cpp
ParseOnlyAction
PrintParseAction
tools/driver/cc1_main.cpp
clang/Frontend/FrontendActions.h



Runtime
=======

runtime.Compiler?



Long term
=========

http://llvm.org/docs/GarbageCollection.html
-> Can this work with the regular go collector?

share diags code with clang
  merge r169890

libclang-style c api
python bindings for that c api
clang-complete clone on top of the python bindings
code formatter (lexer, parser, or ast based?)
tooling / refactoring stuff
static analyzer


Notes
=====

go is easier to lex:
- no escaped newlines
- no trigraphs
- no preprocessor
- way fewer string literal types

parse:
- no templates
- no vexing parse
- fewer precedence levels

+ annoying: parameterdecl. if identifier, need to look at next token.
                           if next is ',', identifier is part of IdentifierList
                           elif next is '...', identifier is IdentifierList
                           elif next is type, identifier is IdentifierList
                           else identifier is type
+ annoying: simplestmt vs expr in if. always need to parse simplestmt, and then
            potentially convert to expr. "for" is worse cause the simplestmt
            parsing needs to allow a rangeexpr in that case too.
+ annoying: switchstms. Have to parse a simplestmt first, but if that's not
            followed by a ';', the simplestmt was actually a TypeSwitchGuard,
            so parsesimplestmt needs to allow that too :-/

+ annoying: func(a, b, c) is a typelist while func(a, b, c int) is an identifier
            list with one type. (not terrible, but annoying. also annoying for
            ... in type lists.)

+ annoying: |if a == b {}| can be a compositelit or just |b| and a block. But
            made less annoying by the spec:

"""A parsing ambiguity arises when a composite literal using the TypeName form
of the LiteralType appears between the keyword and the opening brace of the
block of an "if", "for", or "switch" statement, because the braces surrounding
the expressions in the literal are confused with those introducing the block of
statements. To resolve the ambiguity in this rare case, the composite literal
must appear within parentheses.

if x == (T{a,b,c}[i]) { … }
if (x == T{a,b,c}[i]) { … }
"""


spec groups:
import, var, const, type


range expressions are weird. They're the only place where full expressions are
allowed at the lhs (actually, RecvStms are like this too). This is valid:

package main
func main() {
  arr := [...]int {1, 2, 3 }
  for arr[0] := range arr {
    println(arr[0])
  }
}

But this is not:

package main
func main() {
  arr := [...]int {1, 2, 3 }
  for arr[0] := 0; arr[0] < 2; arr[0]++ {
    println(arr[0])
  }
}

(Both programs are valid if you use '=' instead of ':=')

minimalaction deletion:
http://lists.cs.uiuc.edu/pipermail/cfe-commits/Week-of-Mon-20100719/032534.html


clang diags:
DiagnosticsEngine::Diag() central function
ArgumentKind has std_string, declcontext, etc
has a SourceManager
error limits, ignores warnings, fatal errors, include stacks, macro stacks,
template stacks, some argumentkinds (identifierinfo and later) and corresponding
DiagBuilder operator<< overloads

DiagnosticBuilder adds stuff (arguments, source ranges) stuff to diags before
they're printed

Delegates to DiagnosticConsumer

DiagnosticsEngine uses DiagnosticIDs as id database, which in turn depends on
all the hardcoded .td files for clang stuff. (DiagnosticIDs::EmitDiag() gets a
DiagnosticEngine object.)

DiagnosticConsumers:
TextDiagnosticBuffer: Stores messages
TextDiagnosticPrinter: Prints messages

DiagnosticEngine dep on DiagnosticIDs might be movable behind an interface.
