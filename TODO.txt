hotlist:
P0 varspec type checking
P0 use that to give VarDecls and ConstDecls a type
P0 finish struct type support
   - need StructType in addition to StructTypeDecl => done
   - need to add StructType support to getTypeDeclTypeSlow
   - need to add NameTypeDecl support there too (see getTypedefType)
   - field lookup (clang: SemaExprMember.cpp,
                   ActOnStartCXXMemberReference, ActOnMemberAccessExpr
                   => LookupMemberExpr -> LookupMemberExprInRecord ->
                      LookupQualifiedName: 1. LookupDirect 2.lookupInBases.
                      Builds MemberExpr.)
     - for embedded fields too
   - recursive struct types (P2)
P0 check types for identity, assignability
P0 basic expression type checking (unary, binary ops)
P0 support for number and string literals
   - implement support for fielddecl tags once that's done
P0 give all exprs types, implement some sema for them
P0 maps (needs comparison op checking), chans, slices, arrays
P1 function parameter lists (and return names, and methoddecls)
!! ParseTypeList() needs something like IdentOrExprList for types, to
   make parameter parsing possible.
       Parameters used in:
          func Signature (for params and optionally for result)
              used for FunctionType, which is used by
                  FunctionLit
              FunctionDecl
              MethodDecl (also has a Receiver)
              MethodSpec (in Interfacetype; implicit Receiver)
P2 function literal parameter lists
P2 typo correction for names (blocked on structs)
P2 interface types
P1 type checking
P2 hand type and / or initializer to ConstSpec
P1 types for var and const


General s/llvm::SourceMgr/SourceManager/g

Look at SourceMgr-based fixits! They were added r172086.

New base class TypedIdentListDecl for:
* VarSpecDecl
* ConstSpecDecl
* FieldSpecDecl (for structs)
  (anonymous field decls can have ident lists that are 0 long)
* Parameter lists for func and methods and interfaces and function literals
* TypeSpecDecl? Always has a single name; possibly not?
  => Common super class TopLevelDecl for TypedIdentListDecl, TypeSpecDecl,
     FunctionDecls?

VarSpecDecl has an optional rhs list. ConstSpecDecl too.
FieldSpecDecl has an optional star sourceloc (wasteful, could have a subclass
with a different type that adds on the storage, for free-ish).

function parameter list entry lists can have an optional '...'.

Every entry is a TypedIdentDecl (with a hopefully shorter name), which
is just an index into the storage of a TypedIdentListDecl. Specs with a single
name could embed the data.
=> Or always embed the data and have a bit that stores if the class is embedded?
   And in that case, the type isn't stored locally?
   OTOH, NamedDecls store all that junk anyways so might as well store it
   always in TypedIdentDecl for now. Costs an extra 4 byte per object
   for the type decl shared by all entries in the typed ident list.
   => also stores all idents and sourcelocs twice; once in NamedDecl, once
      in the spec. Probably want to remove that storage from NamedDecl (and
      kill NamedDecl? Or have inline storage; that'd be good for typespecs too).


memory layout of a TypedIdentListDecl:
- count
- type decl
- 'count' times (this is a subclass)
  - ident
  - sourceloc
(comma locs?)
- subclass data such as rhs, star loc, ellipsis loc, etc

how to get the type from an entry object in that scheme? steal bits from the
ident pointer as index, have a 3rd field that stores an explicit index in the
rare case that doesn't suffice?

if the subclass can be optionally standalone, need one bit to save that too.
it looks like the ast allocator aligns nodes on 8-byte-boundaries, so there
are 3 bits. (class Decl has 3 bits to spare too; possibly more.)
1 bit: standalone?
2 bits: offset. 0-2: index 0-2. 3: 4 byte offset in subclass.


=> Looks like there's room to optimize AST space efficiency; go for simple
   and tweak stuff later once it's clear it'll work out.
   (Need AST stats dumping for that anyhow.)
=> named decls can be either TypedIdentListDecls or TypedIdentDecl, client needs
   to handle both. or have a virtual method? blech. TypedIdentListDecls could
   have a custom allocator packing additional stuff before and after the class
   (hairy with subclasses that need custom data) and derive from TypedIdentDecl?

were it not for funcs and methods, every NamedDecl could just be list pointer
and index. NamedDecl could steal a bit from the list pointer to make it a
union {
  struct {
    TypedIdentList*;
    index;  (get all data from the TypedIdentList at that index)
  }
  struct {
    Kind;
    IdentifierInfo;
    SourceLocation;
    Type; (?)
  }
}

Or make the storage not a Decl and make only the entries decls? doesn't save
all that much for long ident lists, but most are short.

* var, const: name, source loc, typedecl, inferred type
  (possibly rhs; comma loc, = loc)
* type: name, source loc, typedecl
  (possibly rhs; comma loc, = loc)
* function parameter: name, source loc, typedecl)
  somewhere: optional ellipsis loc
* function name: name, source loc, maybe computed type (but this class is part
  of the functiondecl and doesn't need to refer to a decl -- though I suppose
  this could be modelled as a name with a functype)
* struct field: name, sourceloc, typedecl
  somewhere: optional star loc


make sure that the solution prints only one error for each unknown identifier!



Lexer
=====

Eventually: code completion markers
flag to dump stats

mark unknown tokens in the rune / string error cases as literals, so that semi
insertion is done. Makes error recovery nicer. (`var a = ''\nvar b` doesn't
recover well atm)

lookahead

literal lexing and diags (078 vs 078.0, 'aa', etc. `ack FIXME test/Lex`)

use lexer to train a n-gram token model, write a markov go generator using that
data

unify utf8 functions with the ones in Basic (used by libFrontend), see also
http://llvm.org/viewvc/llvm-project?view=revision&revision=174765
(charinfo to own file patch)


Parser
=====

Multi-file modules

Allow parens around receiver types,
https://code.google.com/p/go/source/detail?r=c7fe6d0e90eb

for f in $(find ~/src/go/src/pkg/ -name '*.go'); do echo $f; if ! ../../Release+Asserts/bin/gong $f; then break; fi; done
Takes:
6.3s on dec 6.
6s on jan 24.

check IsExpression() everywhere ParseExpression() is called

diag only once on 
  a := (a[1)

Try to emit diags at end of previous token instead of on current token in
many cases. e.g.

  interface {
    foo.  // should diag here
  }       // does diag here

Only one diag when ending a file without a closing ) (imports) / } (blocks)

Nicer diag for function literal in struct ("unexpected function body",
"no function iterals allowed in structs", ...)

Actions interface
  Create ExprList
  Ensmarten expr parser to hand out right stuff for ForStmt action methods

Have nice fixit for toplevel `a := b`

Have nice fixit for "func a(){}" at function scope (just remove name?)

Handle https://groups.google.com/forum/#!topic/golang-nuts/Bv4GDkPRMxA well

missing closing braces after interface, struct, blocks, selects, switchs
missing closing parens after impor/var/const/type spec


introduce a consistent naming scheme for functions that assert the current
token type vs those that don't
    handle tok::unknown
  MaybeParse...() in clang is for stuff based on langopts
  TryParseFoo / TryFoo
  ExpectFoo
  MustParseFoo
  DoParseFoo
  DiagParseFoo
  ErrParseFoo
  SoftParseFoo
  CanParseFoo
  CouldParseFoo
  ConsumeFoo
  EatFoo
  CheckParseFoo
    ...but in all cases, only the head is asserted

  parser.go does tryFoo / parseFoo. acorn.js mostly does parseFoo.

share {} parsing code for interface{}, struct{}, and possibly blocks,
selectstmts, and switchstmts

maybe share the optional SimpleStmt parsing code in ifstmt, forstmt, switchstmt

make it so that eg |type t ['4'.(int]int| gets only one diag. clang does this
with this code in ParseParenExpr() (at the very end):

  if (Result.isInvalid()) {
    SkipUntil(tok::r_paren);
    return ExprError();
  }

  T.consumeClose();


nice diag with fixit (insert ',') for
  myfunc(
    4
  )

nice diag with fixit (insert "()") for |if a == type{} { ... }|

less horrible diag for "fmt.Println.("

audit and test QualifiedIdent handling once classifyIdentifier() is gone

ident and expr lists for forranges and commcases:
https://code.google.com/p/go/source/detail?r=ef1ce4503d85

nice diag for:
package main

var (
  foo = 4

type apple int

(maybe: if kw_* is seen in group, say "probably missing closing parentheses"?)



Sema / AST
==========

Inject into scopes:
* function parameters
* decls in case clauses
* handle methoddecls


- Name lookup, redecl errors, scope, decl ast
  In clang: SemaDecl.cpp, ActOnDeclarator(), PushOnScopeChains()
  ActOnFunctionDeclarator, ActOnTypedefDeclarator, ActOnVariableDeclarator,
  ActOnParamDeclarator, ActOnCXXMemberDeclarator are all called by
  ActOnDeclarator depending on the type of the declspec.

  For structs: ActOnTag -> DeclPtr, ActOnTagStartDefinition(DeclPtr),
    FinishDefinition(DeclPtr), DefinitionError(DeclPtr)

  Functions: ActOnFunctionDeclarator() uses DeclaratorChunk::FunctionTypeInfo
             to set parmvardecls on FunctionDecl.
             ActOnStartOfFunctionDef, ActOnFinishFunctionBody

  - Scopes, in clang

    TopFunctionScope, FunctionScopes, TUScope, PopFunctionOrBlockScope()

  In go, file scope is only used for imports. package-scoped stuff can't have
  the same names as file-scoped stuff.

  - Identifier resolving: IdentifierResolver.cpp

  identlists in gong vs declarators in clang: ActOnDeclarator called for every
  single declarator

  declspec: unsigned, inline, virtual, explicit, auto, signed, typeof,
            TST_typename (for structs), struct
  declaratorchunk: pointer, ref, arr, fun, memberpointer, paren
  declarator: declspec, list of declaratorchunks,
              single identifier (unqualifiedid), context
              parameter info

  Parser:
    Scope
      Scope::getEntity() is a DeclContext in Sema
        via Sema::PushDeclContext() / PopDeclContext()
      scope flags: 
        Scope::DeclScope
  AST:
    DeclContext
      decl_iterator of decls; specific_decl_iterator to limit
    Decl
      has source loc, attrs, used, invalid etc bits
      NextInContext list
    Redeclarable<>
      linked list of decls (with cycle and some bool)
  Sema:
    IdentifierResolver
    LookupResult
    LookupName()
    PushOnScopeChains()

  concepts:
    lexical decl context and semantic decl context
    scope chains
    decl chains, canonical decls
    decl merging

  substeps
  - special rules: don't bind to '_', allow redefinitions of global 'init()'
  - later: structs, methoddecls, type correction for structs, modules
  - DeclTy ownership

- Expression Sema & AST, Exprs vs Types
  - Exprs vs Types: DeclRefExpr pointing to TypeDecl (pointing to Type) or
    VarDecl (pointing to ident, type)
  - typo correction!
- Constant expressions
- Statement Sema & AST
- Out-of-order parsing for toplevel
- Multi-file packages



Find out:
* go doesn't need predeclarations for methods, figure out how to do that
  => similar to objc, check what clang does.
  Parser.h:
    ObjCImplParsingDataRAII
      typedef SmallVector<LexedMethod*, 8> LateParsedObjCMethodContainer;
      LateParsedObjCMethodContainer LateParsedObjCMethods;
  ParseObjc.cpp
    Parser::parseLexedObjcMethodDefs() -> calls PP.EnterTokenStream()


  (Also inline methods:
  DeclSpec.h:992:
    typedef SmallVector<Token, 4> clang::CachedTokens
  Parser.h:
    struct LateParsedDeclaration
    struct LexedMethod : public LateParsedDeclaration
      CachedTokens Toks;

  ParseCXXInlineMethods.cpp:378
    Parser::ParseLexedMethodDef() -> calls PP.EnterTokenStream())

  => clang's design is to stash a way a vector with all Tokens and parse those.
  => An alternative design would be to do two lex passes, with the first just
     matching decls ("func foo", "var foo", "const foo", "type foo") quickly.
  Implement both and measure, I guess :-/


 http://lists.cs.uiuc.edu/pipermail/cfe-commits/Week-of-Mon-20120206/052791.html
* QualType and Type
* ASTContext turns Decls into QualTypes (ASTContext::getRecordType() etc)
  Creates builtin types in InitBuiltinTypes
* QualType vs CanQualType
* redeclarations in go -> not allowed at all!
  ...except for init() 9_9
* Basic idea of package handling
  Looks like all source files in the same package need to be compiled in one
  compiler invocation. They're probably all parsed, then merged, then Sema'd
  and codegenned as one?
  _test.go files are magic somehow (sounds like everything is rebuilt?)


constants / constant expressions:
  -> http://clang.llvm.org/docs/InternalsManual.html#Constants
  http://tip.golang.org/ref/spec#Constant_expressions
  http://tip.golang.org/ref/spec#Constants
 integer, rune, float complex, string
 operators
 conversions()
 identifiers referring to constants
 typed and untyped constants
 unsafe.Sizeof, cap() and len() sometimes (len of constant str, cap and len
   of constant array with no func calls or channel recvs)
 true false iota


AST

  Module
    File  <- for "package foo"

  ImportSpec  <- Decl?
    SingleImportSpec
    MultiImportSpec

  Stmt
    NullStmt
    BlockStmt
    CaseStmt?
    IfStmt
    ExprSwitchStmt
    TypeSwitchStmt
    ForStmt
    RangeForStmt?
    ExprStmt?
    GotoStmt
    ReturnStmt
    BreakStmt
    ContinueStmt
    FallthroughStmt?
    AsmStmt? :-D
    DeclStmt
    LabeledStmt
    GoStmt
    DeferStmt
    SelectStmt
    SendStmt
    IncDecStmt
    Assignment
    ShortVarDecl

   Expression
    Literal
     BasicLit
       IntLit
       FloatLit
       ImaginaryLit
       CharLit
       StringLit
     CompositeLit
       ...
     FunctionLit
    OperandName (?) / DeclRefExpr
    BinaryExpr
    UnaryExpr
    Conversion
    BuiltinCall
    SelectorExpr
    IndexExpr
    SliceExpr
    TypeAssertionExpr
    CallExpr
    TypeClauseExpr?
    RangeExpr?

   Module
    File
     TopLevelDecl
   Declaration
    SingleDeclaration
    MultiDeclaration

  TypeSpecDecl
  VarSpecDecl  : identlist, exprlist, equalloc
    VarDecl: VarSpecDecl ptr, index

  FIXME: look at clang's DeclGroupRef again

    ConstDecl
      SingleConstSpec
      MultiConstSpec

    blah, ConstSpec has to be a child of NamedDecl
    => This is similar to LinkageSpecDecl in clang. Make all the Decls be
    transparent DeclContexts, and have FooSpec be a child class of NamedDecl

    enums:
      ActOnTag
      ActOnTagStartDefinition()
      for
        ActOnEnumConstant
      ActOnEnumBody(all enums)
      ActOnTagFinishDefinition()

    TypeDecl  ('type' is in 'loc' of decl superclass)
      SingleTypeDecl
      MultiTypeDecl

      void ActOnSingleTypeDecl(typeloc, ii, iiloc, type*)
      DeclTy ActOnStartMultiTypeDecl(typeloc, lparenloc)
      void ActOnMultiTypeDeclSpec(DeclTy, ii, iiloc, type*)
      void ActOnEndMultiTypeDecl(DeclTy, rparenloc)

    VarDecl
      SingleVarDecl
      MultiVarDecl
   FunctionDecl
   MethodDecl

  Type
    BooleanType
    NumericType
    ArrayType
    SliceType
    StructType
    PointerType
    FunctionType
    InterfaceType
    MapType
    ChannelType
 Strong typedefs => all types are canonical

Type identity:
  http://tip.golang.org/ref/spec#Properties_of_types_and_values

  named types identical if from same typespec (ie `type foo int` and int are
  different)
  arrays are identical if same type and len
  slices are identical if same type


Check that everything on
http://jordanorelli.tumblr.com/post/42369331748/function-types-in-go-golang
works.


Actions
=======

Document ownership model.
  OwningExpr/StmtResult: Will be deleted by parser by calling
      Action::DeleteExpr/Stmt() (FIXME: Why no OwningDeclResult?)
  Expr/StmtResult: weak form thereof

  Expr/StmtArg: "as arguments" (FIXME: huh?)

  MultiExpr/StmtArg: Collection of Expr/StmtArgs

  move()
  move_arg()
    ExprVector -> MultiExprArg
    StmtVector -> MultiStmtArg
  release()

ExprArg vs FullExprArg (the latter is "complete" -- in go, I guess that means
resolved variables. "a, b := c, d" shouldn't complain about a, b being unknown.)
  => but could just make parser smarter, then this is probably not needed

types/exprs in ()
(*TypeName) in MethodExprs
*foo() vs (*foo)()
<-foo() vs (<-foo)()
func()(foo) vs (func())(foo)


Frontend
========

-parse-noop and -parse-print-callbacks: (r109392)
lib/Frontend/FrontendActions.cpp
ParseOnlyAction
PrintParseAction
tools/driver/cc1_main.cpp
clang/Frontend/FrontendActions.h



Runtime
=======

runtime.Compiler?



Long term
=========

http://llvm.org/docs/GarbageCollection.html
-> Can this work with the regular go collector?

share diags code with clang
  merge r169890

libclang-style c api
python bindings for that c api
clang-complete clone on top of the python bindings
code formatter (lexer, parser, or ast based?)
tooling / refactoring stuff
static analyzer


Notes
=====

go is easier to lex:
- no escaped newlines
- no trigraphs
- no preprocessor
- way fewer string literal types

parse:
- no templates
- no vexing parse
- fewer precedence levels

+ annoying: parameterdecl. if identifier, need to look at next token.
                           if next is ',', identifier is part of IdentifierList
                           elif next is '...', identifier is IdentifierList
                           elif next is type, identifier is IdentifierList
                           else identifier is type
+ annoying: simplestmt vs expr in if. always need to parse simplestmt, and then
            potentially convert to expr. "for" is worse cause the simplestmt
            parsing needs to allow a rangeexpr in that case too.
+ annoying: switchstms. Have to parse a simplestmt first, but if that's not
            followed by a ';', the simplestmt was actually a TypeSwitchGuard,
            so parsesimplestmt needs to allow that too :-/

+ annoying: func(a, b, c) is a typelist while func(a, b, c int) is an identifier
            list with one type. (not terrible, but annoying. also annoying for
            ... in type lists.)

+ annoying: |if a == b {}| can be a compositelit or just |b| and a block. But
            made less annoying by the spec:

"""A parsing ambiguity arises when a composite literal using the TypeName form
of the LiteralType appears between the keyword and the opening brace of the
block of an "if", "for", or "switch" statement, because the braces surrounding
the expressions in the literal are confused with those introducing the block of
statements. To resolve the ambiguity in this rare case, the composite literal
must appear within parentheses.

if x == (T{a,b,c}[i]) { … }
if (x == T{a,b,c}[i]) { … }
"""


spec groups:
import, var, const, type

minimalaction deletion:
http://lists.cs.uiuc.edu/pipermail/cfe-commits/Week-of-Mon-20100719/032534.html


clang diags:
DiagnosticsEngine::Diag() central function
ArgumentKind has std_string, declcontext, etc
has a SourceManager
error limits, ignores warnings, fatal errors, include stacks, macro stacks,
template stacks, some argumentkinds (identifierinfo and later) and corresponding
DiagBuilder operator<< overloads

DiagnosticBuilder adds stuff (arguments, source ranges) stuff to diags before
they're printed

Delegates to DiagnosticConsumer

DiagnosticsEngine uses DiagnosticIDs as id database, which in turn depends on
all the hardcoded .td files for clang stuff. (DiagnosticIDs::EmitDiag() gets a
DiagnosticEngine object.)

DiagnosticConsumers:
TextDiagnosticBuffer: Stores messages
TextDiagnosticPrinter: Prints messages

DiagnosticEngine dep on DiagnosticIDs might be movable behind an interface.
