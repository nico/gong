# -*- Python -*-

import os
import platform
import re
import subprocess
import tempfile

import lit.formats
import lit.util

# Configuration file for the 'lit' test runner.

# name: The name of this test suite.
config.name = 'Gong'

# Tweak PATH for Win32
if platform.system() == 'Windows':
    # Seek sane tools in directories and set to $PATH.
    path = getattr(config, 'lit_tools_dir', None)
    path = lit_config.getToolsPath(path,
                                   config.environment['PATH'],
                                   ['cmp.exe', 'grep.exe', 'sed.exe'])
    if path is not None:
        path = os.path.pathsep.join((path,
                                     config.environment['PATH']))
        config.environment['PATH'] = path

# Choose between lit's internal shell pipeline runner and a real shell.  If
# LIT_USE_INTERNAL_SHELL is in the environment, we use that as an override.
use_lit_shell = os.environ.get("LIT_USE_INTERNAL_SHELL")
if use_lit_shell:
    # 0 is external, "" is default, and everything else is internal.
    execute_external = (use_lit_shell == "0")
else:
    # Otherwise we default to internal on Windows and external elsewhere, as
    # bash on Windows is usually very slow.
    execute_external = (not sys.platform in ['win32'])

# testFormat: The test format to use to interpret tests.
#
# For now we require '&&' between commands, until they get globally killed and
# the test runner updated.
config.test_format = lit.formats.ShTest(execute_external)

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.go']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# test_exec_root: The root path where tests should be run.
gong_obj_root = getattr(config, 'gong_obj_root', None)
if gong_obj_root is not None:
    config.test_exec_root = os.path.join(gong_obj_root, 'test')

# Set llvm_{src,obj}_root for use by others.
config.llvm_src_root = getattr(config, 'llvm_src_root', None)
config.llvm_obj_root = getattr(config, 'llvm_obj_root', None)

# Tweak the PATH to include the tools dir and the scripts dir.
if gong_obj_root is not None:
    llvm_tools_dir = getattr(config, 'llvm_tools_dir', None)
    if not llvm_tools_dir:
        lit_config.fatal('No LLVM tools dir set!')
    path = os.path.pathsep.join((llvm_tools_dir, config.environment['PATH']))
    config.environment['PATH'] = path
    llvm_libs_dir = getattr(config, 'llvm_libs_dir', None)
    if not llvm_libs_dir:
        lit_config.fatal('No LLVM libs dir set!')
    path = os.path.pathsep.join((llvm_libs_dir,
                                 config.environment.get('LD_LIBRARY_PATH','')))
    config.environment['LD_LIBRARY_PATH'] = path

###

# Check that the object root is known.
if config.test_exec_root is None:
    # Otherwise, we haven't loaded the site specific configuration (the user is
    # probably trying to run on a test file directly, and either the site
    # configuration hasn't been created by the build system, or we are in an
    # out-of-tree build situation).

    # Check for 'gong_site_config' user parameter, and use that if available.
    site_cfg = lit_config.params.get('gong_site_config', None)
    if site_cfg and os.path.exists(site_cfg):
        lit_config.load_config(config, site_cfg)
        raise SystemExit

    # Try to detect the situation where we are using an out-of-tree build by
    # looking for 'llvm-config'.
    #
    # FIXME: I debated (i.e., wrote and threw away) adding logic to
    # automagically generate the lit.site.cfg if we are in some kind of fresh
    # build situation. This means knowing how to invoke the build system though,
    # and I decided it was too much magic. We should solve this by just having
    # the .cfg files generated during the configuration step.

    llvm_config = lit.util.which('llvm-config', config.environment['PATH'])
    if not llvm_config:
        lit_config.fatal('No site specific configuration available!')

    # Get the source and object roots.
    llvm_src_root = lit.util.capture(['llvm-config', '--src-root']).strip()
    llvm_obj_root = lit.util.capture(['llvm-config', '--obj-root']).strip()
    gong_src_root = os.path.join(llvm_src_root, "tools", "gong")
    gong_obj_root = os.path.join(llvm_obj_root, "tools", "gong")

    # Validate that we got a tree which points to here, using the standard
    # tools/gong layout.
    this_src_root = os.path.dirname(config.test_source_root)
    if os.path.realpath(gong_src_root) != os.path.realpath(this_src_root):
        lit_config.fatal('No site specific configuration available!')

    # Check that the site specific configuration exists.
    site_cfg = os.path.join(gong_obj_root, 'test', 'lit.site.cfg')
    if not os.path.exists(site_cfg):
        lit_config.fatal('No site specific configuration available! You may '
                         'need to run "make test" in your '
                         'Gong build directory.')

    # Okay, that worked. Notify the user of the automagic, and reconfigure.
    lit_config.note('using out-of-tree build at %r' % gong_obj_root)
    lit_config.load_config(config, site_cfg)
    raise SystemExit

###

# Discover the 'gong' and 'gongcc' to use.

import os

def inferGong(PATH):
    # Determine which gong to use.
    gong = os.getenv('GONG')

    # If the user set gong in the environment, definitely use that and don't
    # try to validate.
    if gong:
        return gong

    # Otherwise look in the path.
    gong = lit.util.which('gong', PATH)

    if not gong:
        lit_config.fatal("couldn't find 'gong' program, try setting "
                  "GONG in your environment")

    return gong

config.gong = inferGong(config.environment['PATH']).replace('\\', '/')
if not lit_config.quiet:
    lit_config.note('using gong: %r' % config.gong)

# Note that when substituting %gong_cc1 also fill in the include directory of
# the builtin headers. Those are part of even a freestanding environment, but
# Gong relies on the driver to locate them.
def getGongBuiltinIncludeDir(gong):
    # FIXME: Rather than just getting the version, we should have gong print
    # out its resource dir here in an easy to scrape form.
    cmd = subprocess.Popen([gong, '-print-file-name=include'],
                           stdout=subprocess.PIPE)
    if not cmd.stdout:
      lit_config.fatal("Couldn't find the include dir for Gong ('%s')" % gong)
    return cmd.stdout.read().strip()

config.substitutions.append( ('%gong_cc1', '%s -cc1 -internal-isystem %s'
                              % (config.gong,
                                 getGongBuiltinIncludeDir(config.gong))) )

config.substitutions.append( ('%gongxx', ' ' + config.gong +
                              ' -ccc-cxx '))
config.substitutions.append( ('%gong', ' ' + config.gong + ' ') )
config.substitutions.append( ('%test_debuginfo', ' ' + config.llvm_src_root + '/utils/test_debuginfo.pl ') )

# FIXME: Find nicer way to prohibit this.
config.substitutions.append(
    (' gong ', """*** Do not use 'gong' in tests, use '%gong'. ***""") )
config.substitutions.append(
    (' gong\+\+ ', """*** Do not use 'gong++' in tests, use '%gongxx'. ***"""))
config.substitutions.append(
    (' gong-cc ',
     """*** Do not use 'gong-cc' in tests, use '%gong_cc1'. ***""") )
config.substitutions.append(
    (' gong -cc1 ',
     """*** Do not use 'gong -cc1' in tests, use '%gong_cc1'. ***""") )
config.substitutions.append(
    (' %gong-cc1 ',
     """*** invalid substitution, use '%gong_cc1'. ***""") )

###

# Set available features we allow tests to conditionalize on.
#
# As of 2011.08, crash-recovery tests still do not pass on FreeBSD.
if platform.system() not in ['FreeBSD']:
    config.available_features.add('crash-recovery')

# Shell execution
if platform.system() not in ['Windows'] or lit.getBashPath() != '':
    config.available_features.add('shell')

# For tests that require Darwin to run.
if platform.system() in ['Darwin']:
    config.available_features.add('system-darwin')

# ANSI escape sequences in non-dumb terminal
if platform.system() not in ['Windows']:
    config.available_features.add('ansi-escape-sequences')

# Case-insensitive file system
def is_filesystem_case_insensitive():
    handle, path = tempfile.mkstemp(prefix='case-test', dir=config.test_exec_root)
    isInsensitive = os.path.exists(path.upper())
    os.close(handle)
    os.remove(path)
    return isInsensitive

if is_filesystem_case_insensitive():
    config.available_features.add('case-insensitive-filesystem')

# [PR8833] LLP64-incompatible tests
if not re.match(r'^x86_64.*-(win32|mingw32)$', config.target_triple):
    config.available_features.add('LP64')

# Registered Targets
def get_llc_props(tool):
    set_of_targets = set()
    enable_assertions = False

    cmd = subprocess.Popen([tool, '-version'], stdout=subprocess.PIPE)

    # Parse the stdout to get the list of registered targets.
    parse_targets = False
    for line in cmd.stdout:
        line = line.decode('ascii')
        if parse_targets:
            m = re.match( r'(.*) - ', line)
            if m is not None:
                set_of_targets.add(m.group(1).strip() + '-registered-target')
            else:
                break
        elif "Registered Targets:" in line:
            parse_targets = True

        if re.search(r'with assertions', line):
            enable_assertions = True

    return {"set_of_targets":    set_of_targets,
            "enable_assertions": enable_assertions}

llc_props = get_llc_props(os.path.join(llvm_tools_dir, 'llc'))
if len(llc_props['set_of_targets']) > 0:
    config.available_features.update(llc_props['set_of_targets'])
else:
    lit_config.fatal('No Targets Registered with the LLVM Tools!')

if llc_props['enable_assertions']:
    config.available_features.add('asserts')

if lit.util.which('xmllint'):
    config.available_features.add('xmllint')


